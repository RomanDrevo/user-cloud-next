{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roman\\\\code\\\\user-cloud-next\\\\src\\\\pages\\\\login\\\\Login.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport style from './login/Login.module.scss';\nimport { Form, Input } from 'antd';\nimport Spinner from '../components/spinner';\nimport { isAuthenticated, isLoading } from '../store/selectors';\nimport { login, loginSuccess, setIsAuthenticated } from '../store/actions/authActions';\nimport { connect } from 'react-redux';\nimport FloatLabel from '../components/floatLabel/FloatLabel';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { COLORS } from '../utils/constatns';\nimport FormErrorLocker from '../components/form-error-locker/FormErrorLocker';\nimport FormLocker from '../components/form-locker/FormLocker';\nimport { setLoading } from '../store/actions/uIStateActions';\nimport { MailOutlined, LockOutlined } from '@ant-design/icons';\nimport Logo from '../components/logo/Logo';\nimport Router, { withRouter } from 'next/router';\n\nconst Login = ({\n  isLoading,\n  login,\n  isAuthenticated,\n  history,\n  loginSuccess\n}) => {\n  useEffect(() => {\n    const redirect = async () => {\n      setLoading(true);\n\n      try {\n        const token = await localStorage.getItem('token');\n        console.log('---token: ', token);\n\n        if (token) {\n          setLoading(false);\n          loginSuccess(true);\n        }\n      } catch (e) {\n        console.log('--er: ', e);\n      }\n    };\n\n    if (isAuthenticated) {\n      Router.push('/');\n    } else {\n      redirect();\n    }\n  }, [isAuthenticated]);\n  const {\n    0: {\n      email,\n      password\n    },\n    1: setState\n  } = useState({\n    email: '',\n    password: ''\n  });\n\n  const handleOnChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      [name]: value\n    }));\n  };\n\n  const handleOnClick = () => {\n    login({\n      email,\n      password\n    });\n  };\n\n  if (isLoading) return __jsx(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 27\n    }\n  });\n  return __jsx(\"div\", {\n    className: style['login-page-wrapper'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, __jsx(Logo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    className: \"signin-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, \"Sign in\"), __jsx(Formik, {\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    validationSchema: Yup.object().shape({\n      email: Yup.string().email('Please enter a valid email address').required('Required'),\n      password: Yup.string().required('No password provided.').min(3, 'Password should be 3 chars minimum.')\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, props => {\n    const {\n      values,\n      touched,\n      errors,\n      dirty,\n      handleChange,\n      handleBlur\n    } = props;\n\n    const customHandleChange = e => {\n      handleChange(e);\n      handleOnChange(e);\n    };\n\n    if (isLoading) return __jsx(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 43\n      }\n    });\n    return __jsx(\"div\", {\n      className: \"flex flex-column items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 25\n      }\n    }, __jsx(Form, {\n      name: \"forgot-password-email\",\n      className: \"forgot-password-email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 29\n      }\n    }, __jsx(Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 33\n      }\n    }, __jsx(MailOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 37\n      }\n    }), __jsx(FloatLabel, {\n      label: \"Email\",\n      name: \"email\",\n      value: values.email,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 37\n      }\n    }, __jsx(Input, {\n      id: \"email\",\n      onChange: customHandleChange,\n      name: \"email\",\n      value: values.email,\n      onBlur: handleBlur,\n      suffix: errors.email ? __jsx(FormErrorLocker, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 68\n        }\n      }) : __jsx(FormLocker, {\n        color: !dirty ? COLORS.white : COLORS.green,\n        opacity: !dirty ? 0.65 : 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 49\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 41\n      }\n    })), errors.email && touched.email && __jsx(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 41\n      }\n    }, errors.email)), __jsx(Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 33\n      }\n    }, __jsx(LockOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 37\n      }\n    }), __jsx(FloatLabel, {\n      label: \"Password\",\n      name: \"password\",\n      value: values.password,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 37\n      }\n    }, __jsx(Input, {\n      type: \"password\",\n      id: \"password\",\n      onChange: customHandleChange,\n      name: \"password\",\n      value: values.password,\n      onBlur: handleBlur,\n      suffix: errors.password ? __jsx(FormErrorLocker, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 71\n        }\n      }) : __jsx(FormLocker, {\n        color: !dirty ? COLORS.white : COLORS.green,\n        opacity: !dirty ? 0.65 : 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 49\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 41\n      }\n    })), errors.password && touched.password && __jsx(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 41\n      }\n    }, errors.password)), __jsx(\"div\", {\n      className: \"button-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 33\n      }\n    }, __jsx(\"button\", {\n      className: \"button\",\n      disabled: errors.email || !values.email || errors.password || !values.password,\n      onClick: handleOnClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 37\n      }\n    }, __jsx(\"div\", {\n      className: \"btn-txt\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 41\n      }\n    }, \"Sign In\")))));\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    isLoading: isLoading(state),\n    isAuthenticated: isAuthenticated(state)\n  };\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    login: data => dispatch(login(data)),\n    setIsAuthenticated: data => dispatch(setIsAuthenticated(data)),\n    loginSuccess: () => dispatch(loginSuccess()),\n    setLoading: data => dispatch(setLoading(data))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["C:/Users/Roman/code/user-cloud-next/src/pages/login/Login.js"],"names":["React","useEffect","useState","style","Form","Input","Spinner","isAuthenticated","isLoading","login","loginSuccess","setIsAuthenticated","connect","FloatLabel","Formik","Yup","COLORS","FormErrorLocker","FormLocker","setLoading","MailOutlined","LockOutlined","Logo","Router","withRouter","Login","history","redirect","token","localStorage","getItem","console","log","e","push","email","password","setState","handleOnChange","name","value","target","prevState","handleOnClick","object","shape","string","required","min","props","values","touched","errors","dirty","handleChange","handleBlur","customHandleChange","white","green","mapStateToProps","state","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport style from './login/Login.module.scss';\r\nimport {Form, Input} from 'antd';\r\nimport Spinner from '../components/spinner';\r\nimport {isAuthenticated, isLoading} from '../store/selectors';\r\nimport {login, loginSuccess, setIsAuthenticated} from '../store/actions/authActions';\r\nimport {connect} from 'react-redux';\r\nimport FloatLabel from '../components/floatLabel/FloatLabel';\r\nimport {Formik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {COLORS} from '../utils/constatns';\r\nimport FormErrorLocker from '../components/form-error-locker/FormErrorLocker';\r\nimport FormLocker from '../components/form-locker/FormLocker';\r\nimport {setLoading} from '../store/actions/uIStateActions';\r\nimport {MailOutlined, LockOutlined} from '@ant-design/icons';\r\nimport Logo from '../components/logo/Logo';\r\nimport Router, { withRouter } from 'next/router'\r\n\r\n\r\n\r\nconst Login = ({isLoading, login, isAuthenticated, history, loginSuccess}) => {\r\n    useEffect(() => {\r\n        const redirect = async () =>{\r\n            setLoading(true);\r\n            try {\r\n                const token = await localStorage.getItem('token');\r\n                console.log('---token: ', token);\r\n                if (token) {\r\n                    setLoading(false);\r\n                    loginSuccess(true);\r\n                }\r\n            }catch (e) {\r\n                console.log('--er: ', e);\r\n            }\r\n        };\r\n        if (isAuthenticated) {\r\n            Router.push('/');\r\n        } else {\r\n            redirect();\r\n        }\r\n    }, [isAuthenticated]);\r\n\r\n    const [{email, password}, setState] = useState({\r\n        email: '',\r\n        password: '',\r\n    });\r\n\r\n    const handleOnChange = e => {\r\n        const {name, value} = e.target;\r\n        setState(prevState => ({...prevState, [name]: value}));\r\n    };\r\n\r\n    const handleOnClick = () => {\r\n        login({email, password});\r\n    };\r\n\r\n    if (isLoading) return <Spinner/>;\r\n\r\n    return (\r\n        <div className={style['login-page-wrapper']}>\r\n            <Logo />\r\n            <div className='signin-text'>Sign in</div>\r\n            <Formik\r\n                initialValues={{email: '', password: ''}}\r\n                validationSchema={Yup.object().shape({\r\n                    email: Yup.string()\r\n                        .email('Please enter a valid email address')\r\n                        .required('Required'),\r\n                    password: Yup.string()\r\n                        .required('No password provided.')\r\n                        .min(3, 'Password should be 3 chars minimum.')\r\n                })}\r\n            >\r\n                {props => {\r\n                    const {\r\n                        values,\r\n                        touched,\r\n                        errors,\r\n                        dirty,\r\n                        handleChange,\r\n                        handleBlur\r\n                    } = props;\r\n\r\n                    const customHandleChange = (e) => {\r\n                        handleChange(e);\r\n                        handleOnChange(e);\r\n                    };\r\n\r\n                    if (isLoading) return <Spinner/>;\r\n\r\n                    return (\r\n                        <div className='flex flex-column items-center'>\r\n                            <Form name='forgot-password-email' className='forgot-password-email'>\r\n                                <Form.Item>\r\n                                    <MailOutlined />\r\n                                    <FloatLabel label=\"Email\" name=\"email\" value={values.email}>\r\n                                        <Input\r\n                                            id='email'\r\n                                            onChange={customHandleChange}\r\n                                            name=\"email\"\r\n                                            value={values.email}\r\n                                            onBlur={handleBlur}\r\n                                            suffix={errors.email ? <FormErrorLocker/> :\r\n                                                <FormLocker color={!dirty ? COLORS.white : COLORS.green}\r\n                                                            opacity={!dirty ? 0.65 : 1}/>}\r\n                                        />\r\n                                    </FloatLabel>\r\n                                    {errors.email && touched.email && (\r\n                                        <div className=\"input-feedback\">{errors.email}</div>\r\n                                    )}\r\n                                </Form.Item>\r\n\r\n                                <Form.Item>\r\n                                    <LockOutlined />\r\n                                    <FloatLabel label=\"Password\" name=\"password\" value={values.password}>\r\n                                        <Input\r\n                                            type='password'\r\n                                            id='password'\r\n                                            onChange={customHandleChange}\r\n                                            name=\"password\"\r\n                                            value={values.password}\r\n                                            onBlur={handleBlur}\r\n                                            suffix={errors.password ? <FormErrorLocker/> :\r\n                                                <FormLocker color={!dirty ? COLORS.white : COLORS.green}\r\n                                                            opacity={!dirty ? 0.65 : 1}/>}\r\n                                        />\r\n                                    </FloatLabel>\r\n                                    {errors.password && touched.password && (\r\n                                        <div className=\"input-feedback\">{errors.password}</div>\r\n                                    )}\r\n                                </Form.Item>\r\n\r\n                                <div className='button-wrapper'>\r\n                                    <button\r\n                                        className='button'\r\n                                        disabled={errors.email || !values.email || errors.password || !values.password}\r\n                                        onClick={handleOnClick}\r\n                                    >\r\n                                        <div className='btn-txt'>Sign In</div>\r\n                                    </button>\r\n                                </div>\r\n                            </Form>\r\n                        </div>\r\n\r\n                    );\r\n                }}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoading: isLoading(state),\r\n        isAuthenticated: isAuthenticated(state)\r\n    };\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        login: data => dispatch(login(data)),\r\n        setIsAuthenticated: data => dispatch(setIsAuthenticated(data)),\r\n        loginSuccess: () => dispatch(loginSuccess()),\r\n        setLoading: data => dispatch(setLoading(data)),\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n"]},"metadata":{},"sourceType":"module"}