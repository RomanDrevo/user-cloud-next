{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"C:\\\\Users\\\\Roman\\\\code\\\\user-cloud-next\\\\src\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\nimport App from 'next/app';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport withRedux from \"next-redux-wrapper\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducers from \"../store/reducers\";\nimport { watchSaga } from \"../store/saga\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport style from './css/App.scss';\nconst sagaMiddleware = createSagaMiddleware(),\n      middlewares = [sagaMiddleware],\n      store = createStore(reducers, composeWithDevTools(applyMiddleware(...middlewares)));\nsagaMiddleware.run(watchSaga);\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {}; //Anything returned here can be access by the client\n\n    return {\n      pageProps: pageProps\n    };\n  }\n\n  render() {\n    //Information that was returned  from 'getInitialProps' are stored in the props i.e. pageProps\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    return __jsx(Provider, {\n      store: store,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }\n    }, __jsx(Component, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }\n    })));\n  }\n\n} //makeStore function that returns a new store for every request\n\n\nconst makeStore = () => store;\n\nconsole.log('----store: ', store); //withRedux wrapper that passes the store to the App Component\n\nexport default withRedux(makeStore)(MyApp);","map":{"version":3,"sources":["C:/Users/Roman/code/user-cloud-next/src/pages/_app.js"],"names":["App","Provider","React","withRedux","applyMiddleware","compose","createStore","createSagaMiddleware","reducers","watchSaga","composeWithDevTools","style","sagaMiddleware","middlewares","store","run","MyApp","getInitialProps","Component","ctx","pageProps","render","props","makeStore","console","log"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAAQC,eAAR,EAAyBC,OAAzB,EAAkCC,WAAlC,QAAoD,OAApD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAAQC,SAAR,QAAwB,eAAxB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,MACIC,cAAc,GAAGL,oBAAoB,EADzC;AAAA,MAEIM,WAAW,GAAG,CAACD,cAAD,CAFlB;AAAA,MAGIE,KAAK,GAAGR,WAAW,CAACE,QAAD,EAAWE,mBAAmB,CAACN,eAAe,CAAC,GAAGS,WAAJ,CAAhB,CAA9B,CAHvB;AAMAD,cAAc,CAACG,GAAf,CAAmBN,SAAnB;;AAGA,MAAMO,KAAN,SAAoBhB,GAApB,CAAwB;AACpB,eAAaiB,eAAb,CAA6B;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,GAA7B,EAA+C;AAC3C,UAAMC,SAAS,GAAGF,SAAS,CAACD,eAAV,GAA4B,MAAMC,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CAAlC,GAAmE,EAArF,CAD2C,CAG3C;;AACA,WAAO;AAACC,MAAAA,SAAS,EAAEA;AAAZ,KAAP;AACH;;AAEDC,EAAAA,MAAM,GAAG;AAEL;AACA,UAAM;AAACH,MAAAA,SAAD;AAAYE,MAAAA;AAAZ,QAAyB,KAAKE,KAApC;AAGA,WACI,MAAC,QAAD;AAAU,MAAA,KAAK,EAAER,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,SAAD,eAAeM,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ,CADJ;AAKH;;AAnBmB,C,CAuBxB;;;AACA,MAAMG,SAAS,GAAG,MAAMT,KAAxB;;AAEAU,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BX,KAA3B,E,CAEA;;AACA,eAAeX,SAAS,CAACoB,SAAD,CAAT,CAAqBP,KAArB,CAAf","sourcesContent":["import App from 'next/app';\r\nimport {Provider} from 'react-redux';\r\nimport React from 'react';\r\nimport withRedux from \"next-redux-wrapper\";\r\nimport {applyMiddleware, compose, createStore} from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport reducers from \"../store/reducers\";\r\nimport {watchSaga} from \"../store/saga\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport style from './css/App.scss';\r\n\r\nconst\r\n    sagaMiddleware = createSagaMiddleware(),\r\n    middlewares = [sagaMiddleware],\r\n    store = createStore(reducers, composeWithDevTools(applyMiddleware(...middlewares)));\r\n\r\n\r\nsagaMiddleware.run(watchSaga);\r\n\r\n\r\nclass MyApp extends App {\r\n    static async getInitialProps({Component, ctx}) {\r\n        const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\r\n\r\n        //Anything returned here can be access by the client\r\n        return {pageProps: pageProps};\r\n    }\r\n\r\n    render() {\r\n\r\n        //Information that was returned  from 'getInitialProps' are stored in the props i.e. pageProps\r\n        const {Component, pageProps} = this.props;\r\n\r\n\r\n        return (\r\n            <Provider store={store}>\r\n                <Component {...pageProps}/>\r\n            </Provider>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n//makeStore function that returns a new store for every request\r\nconst makeStore = () => store;\r\n\r\nconsole.log('----store: ', store);\r\n\r\n//withRedux wrapper that passes the store to the App Component\r\nexport default withRedux(makeStore)(MyApp);\r\n"]},"metadata":{},"sourceType":"module"}